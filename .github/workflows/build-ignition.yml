name: Build ignition

concurrency:
  group: build-ignition-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - README.md
      - .gitignore
  workflow_dispatch:
    inputs:
      version:
        description: "Fedora release version (e.g. 42)"
        required: false
        default: 0
        type: number
      release:
        description: "Fedora build date (e.g. 20250828.0)"
        required: false
        default: ""
        type: string

env:
  STREAM: stable
  BUTANE_IMAGE: quay.io/coreos/butane:release
  INSTALLER_IMAGE: quay.io/coreos/coreos-installer:release
  IMAGE_NAME: ghcr.io/noobping/netboot
  DESKTOP_IMAGE: "quay.io/fedora-ostree-desktops/silverblue"

jobs:
  compute-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.setver.outputs.version }}
      release: ${{ steps.setrel.outputs.release }}
    steps:
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq

      - name: Compute version
        id: setver
        shell: bash
        run: |
          set -euo pipefail

          INPUT="${{ github.event.inputs.version }}"
          if [[ -n "${INPUT:-}" && "${INPUT}" != "0" ]]; then
            VERSION=${INPUT}
            echo "Manual version supplied: $VERSION"
          else
            LATEST_TAG="$(skopeo list-tags docker://quay.io/fedora-ostree-desktops/silverblue \
              | jq -r '.Tags[]' | grep -E '^[0-9]+$' | sort -V | tail -1)"
            VERSION=$((LATEST_TAG - 1))
            echo "Auto-detected version: $VERSION"
          fi

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Compute release
        id: setrel
        shell: bash
        run: |
          set -euo pipefail

          INPUT_REL="${{ github.event.inputs.release }}"
          if [[ -n "${INPUT_REL:-}" ]]; then
            echo "Manual release supplied: $INPUT_REL"
            echo "release=$INPUT_REL" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          VERSION="${{ steps.setver.outputs.version }}"
          if [[ -z "$VERSION" ]]; then
            echo "Version not found from previous step" >&2
            exit 1
          fi

          # Digest of the VERSION stream tag (manifest list)
          VER_DIGEST="$(skopeo inspect docker://${{ env.DESKTOP_IMAGE }}:$VERSION | jq -r '.Digest')"
          if [[ -z "$VER_DIGEST" || "$VER_DIGEST" == "null" ]]; then
            echo "Failed to get digest for ${{ env.DESKTOP_IMAGE }}:$VERSION" >&2
            exit 1
          fi
          echo "Version $VERSION digest: $VER_DIGEST"

          # Get *all* tags (repo only â€” no tag in reference!)
          # Keep only compose-style tags like 20250828.0
          mapfile -t DATE_TAGS < <(skopeo list-tags docker://${{ env.DESKTOP_IMAGE }} \
            | jq -r '.Tags[]' | grep -E '^[0-9]{8}\.[0-9]+$' | sort -V)

          # Find which date tag points to the same digest as the VERSION tag
          MATCHING=()
          for t in "${DATE_TAGS[@]}"; do
            d="$(skopeo inspect docker://${{ env.DESKTOP_IMAGE }}:$t | jq -r '.Digest' || true)"
            [[ -n "$d" && "$d" != "null" ]] || continue
            if [[ "$d" == "$VER_DIGEST" ]]; then
              MATCHING+=("$t")
            fi
          done

          if [[ "${#MATCHING[@]}" -eq 0 ]]; then
            echo "No date tags match digest $VER_DIGEST for version $VERSION" >&2
            # Fallback: try to read image label org.opencontainers.image.version from the version tag
            FALLBACK="$(skopeo inspect docker://${{ env.DESKTOP_IMAGE }}:$VERSION | jq -r '.Labels["org.opencontainers.image.version"] // empty')"
            if [[ -n "$FALLBACK" ]]; then
              echo "Found label: $FALLBACK"
              CLEANED="${FALLBACK#*.}"
              echo "Using fallback: $CLEANED"
              echo "release=$CLEANED" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            exit 2
          fi

          # Latest matching date/build by version sort
          RELEASE="${MATCHING[-1]}"
          echo "Auto-detected release: $RELEASE"
          echo "release=$RELEASE" >> "$GITHUB_OUTPUT"

  generate-ignition:
    needs: compute-version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    env:
      VERSION: ${{ needs.compute-version.outputs.version }}
      RELEASE: ${{ needs.compute-version.outputs.release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Variables
        run: |
          sed "s|__VERSION__|$VERSION|g" configs/silverblue.conf > ks.cfg
          sed -i "s|__RELEASE__|$RELEASE|g" ks.cfg

          arches=(x86_64 aarch64)
          for arch in "${arches[@]}"; do
            sed "s|__ARCH__|$arch|g" ks.cfg > "${arch}.cfg"
          done
          rm ks.cfg

      - name: Dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq curl
          YQ_VERSION=v4.44.3
          curl -L "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" -o yq
          sudo install -m 755 yq /usr/local/bin/yq
          yq --version

      - name: Profiles
        run: |
          set -euo pipefail
          yq ea '. as $item ireduce ({}; . *+ $item)' butane/base.yml butane/live.yml > live.bu
          yq ea '. as $item ireduce ({}; . *+ $item)' butane/base.yml butane/encrypted.yml > stable.bu
          yq ea '. as $item ireduce ({}; . *+ $item)' butane/base.yml butane/filesystems.yml butane/rebase.yml butane/containers.yml butane/steam.yml butane/cockpit.yml > testing.bu

      - name: Live ignition
        run: |
          set -euo pipefail
          docker run --rm -i \
            -v "$PWD":/work -w /work \
            "$BUTANE_IMAGE" \
            --files-dir . --strict < live.bu > live.ign

      - name: Stable ignition
        run: |
          set -euo pipefail
          docker run --rm -i \
            -v "$PWD":/work -w /work \
            "$BUTANE_IMAGE" \
            --files-dir . --strict < stable.bu > stable.ign

      - name: Testing ignition
        run: |
          set -euo pipefail
          docker run --rm -i \
            -v "$PWD":/work -w /work \
            "$BUTANE_IMAGE" \
            --files-dir . --strict < testing.bu > testing.ign

      - name: Upload ignition + site files
        uses: actions/upload-artifact@v4
        with:
          name: files
          path: |
            *.ign
            *.cfg
          if-no-files-found: error

  build-pxe:
    needs: generate-ignition
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download ignition artifact
        uses: actions/download-artifact@v4
        with:
          name: files
          path: .

      - name: Download FCOS live PXE artifacts
        env:
          STREAM: ${{ env.STREAM }}
          INSTALLER_IMAGE: ${{ env.INSTALLER_IMAGE }}
        run: |
          set -euo pipefail
          docker run --rm \
              --user "$(id -u):$(id -g)" \
              -v "$PWD":/work -w /work "$INSTALLER_IMAGE" \
              download -s "$STREAM" -a "${{ matrix.arch }}" -p metal -f pxe -C /work --decompress
          ls -lh

      - name: Embed ignition into initramfs
        env:
          INSTALLER_IMAGE: ${{ env.INSTALLER_IMAGE }}
        run: |
          set -euo pipefail

          echo "Downloaded files:"
          ls -lh

          KERNEL="$(find . -maxdepth 1 -type f \( -name 'fedora-coreos-*-live-kernel.*' -o -name 'fedora-coreos-*-live-kernel*' \) | head -n1)"
          INITRAMFS="$(find . -maxdepth 1 -type f -name 'fedora-coreos-*-live-initramfs.*.img' | head -n1)"
          ROOTFS="$(find . -maxdepth 1 -type f -name 'fedora-coreos-*-live-rootfs.*.img' | head -n1)"

          if [ -z "${KERNEL}" ] || [ -z "${INITRAMFS}" ] || [ -z "${ROOTFS}" ]; then
            echo "ERROR: Could not locate one or more PXE files."
            echo "Kernel:    ${KERNEL:-<missing>}"
            echo "Initramfs: ${INITRAMFS:-<missing>}"
            echo "Rootfs:    ${ROOTFS:-<missing>}"
            exit 1
          fi

          echo "Found:"
          echo "  kernel:    $KERNEL"
          echo "  initramfs: $INITRAMFS"
          echo "  rootfs:    $ROOTFS"

          OUT_INITRAMFS="$(basename "$INITRAMFS" .img)-with-ign.img"

          docker run --rm \
            --user "$(id -u):$(id -g)" \
            -v "$PWD":/work -w /work "$INSTALLER_IMAGE" \
            pxe customize \
              --live-ignition live.ign \
              -o "${OUT_INITRAMFS}" \
              "$(basename "$INITRAMFS")"

          ARCH="$(echo "$ROOTFS" | sed -n 's/.*live-rootfs\.\(.*\)\.img/\1/p')"
          mkdir -p "pxe-${ARCH}"
          cp "$KERNEL" "pxe-${ARCH}/"
          cp "$ROOTFS" "pxe-${ARCH}/"
          cp "$OUT_INITRAMFS" "pxe-${ARCH}/"

          echo "Staged PXE files:"
          ls -lh "pxe-${ARCH}"

      - name: Generate checksums
        run: |
          (cd pxe-${{ matrix.arch }} && sha256sum * > SHA256SUMS)

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.6.0

      - name: Cosign sign PXE blobs
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          for f in pxe-${{ matrix.arch }}/*; do
            cosign sign-blob --yes "$f" --output-signature "$f.sig"
          done

      - name: Upload PXE artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pxe-${{ matrix.arch }}
          path: |
            pxe-${{ matrix.arch }}/*
            pxe-${{ matrix.arch }}/*.sig
            pxe-${{ matrix.arch }}/SHA256SUMS
          if-no-files-found: error
          compression-level: 6
          overwrite: true

  boot-container:
    name: Build & Publish FCOS PXE Container
    needs: build-pxe
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download PXE artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pxe-*
          path: .

      - name: Download ignition artifact
        uses: actions/download-artifact@v4
        with:
          name: files
          path: .

      - run: tree
        continue-on-error: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.description=PXE server for Fedora CoreOS (TFTP + HTTP)
            org.opencontainers.image.title=netboot
            org.opencontainers.image.licenses="MIT"
            io.containers.autoupdate="registry"

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          pull: true
          build-args: |
            UID=1000
            GID=1000
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-iso-fcos:
    name: Build FCOS ISOs
    needs: generate-ignition
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]
        profile: [stable, testing]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download ignition artifact
        uses: actions/download-artifact@v4
        with:
          name: files
          path: .

      - name: Download FCOS live ISO
        run: |
          set -euo pipefail
          docker run --rm \
            --user "$(id -u):$(id -g)" \
            -v "$PWD":/work -w /work "$INSTALLER_IMAGE" \
            download -s "$STREAM" -a "${{ matrix.arch }}" -p metal -f iso -C /work --decompress

      - name: Customize ISO with ignition
        run: |
          set -euo pipefail
          ARCH="${{ matrix.arch }}"
          PROFILE="${{ matrix.profile }}"
          ISO=$(ls -1 fedora-coreos-*-live-iso.${ARCH}.iso | tail -n1)
          EXTRA=""

          echo "Customizing ISO: $ISO (arch: $ARCH, profile: $PROFILE)"
          if [[ "$PROFILE" != "live" ]]; then
            EXTRA=" --dest-ignition ${PROFILE}.ign --pre-install scripts/detect-device.sh"
          fi
          echo "Extra args: $EXTRA"

          docker run --rm \
            --user "$(id -u):$(id -g)" \
            -v "$PWD":/work -w /work "$INSTALLER_IMAGE" \
            iso customize \
              --live-ignition live.ign \
              $EXTRA \
              -o fedora-coreos-$ARCH-$PROFILE.iso \
              "${ISO}"

          ls -l fedora-coreos-$ARCH-$PROFILE.iso

      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        with:
          name: fedora-coreos-${{ matrix.arch }}-${{ matrix.profile }}.iso
          path: fedora-coreos-${{ matrix.arch }}-${{ matrix.profile }}.iso
          if-no-files-found: error
          compression-level: 6
          overwrite: true

  pages:
    needs:
      - build-iso-fcos
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
      contents: read
      packages: read
      actions: read
    env:
      VERSION: ${{ needs.compute-version.outputs.version }}
      RELEASE: ${{ needs.compute-version.outputs.release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: files
          path: dist

      - name: Resolve artifact URLs
        id: artifacts
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          owner_repo="${{ github.repository }}"
          run_id="${{ github.run_id }}"

          # Helper to fetch an artifact ID by its name (exact match)
          art_id() {
            gh api "/repos/$owner_repo/actions/runs/$run_id/artifacts" \
              -q ".artifacts[] | select(.name == \"$1\") | .id"
          }

          # Look up each artifact id
          AARCH64_STABLE_ID="$(art_id 'fedora-coreos-aarch64-stable.iso')"
          AARCH64_TESTING_ID="$(art_id 'fedora-coreos-aarch64-testing.iso')"
          X86_64_STABLE_ID="$(art_id 'fedora-coreos-x86_64-stable.iso')"
          X86_64_TESTING_ID="$(art_id 'fedora-coreos-x86_64-testing.iso')"

          base="https://github.com/$owner_repo/actions/runs/$run_id/artifacts"
          AARCH64_STABLE_URL="$base/$AARCH64_STABLE_ID"
          AARCH64_TESTING_URL="$base/$AARCH64_TESTING_ID"
          X86_64_STABLE_URL="$base/$X86_64_STABLE_ID"
          X86_64_TESTING_URL="$base/$X86_64_TESTING_ID"

          # Expose as outputs
          {
            echo "aarch64_stable=$AARCH64_STABLE_URL"
            echo "aarch64_testing=$AARCH64_TESTING_URL"
            echo "x86_64_stable=$X86_64_STABLE_URL"
            echo "x86_64_testing=$X86_64_TESTING_URL"
          } >> "$GITHUB_OUTPUT"

      - name: Prepare site files
        run: |
          set -euo pipefail
          cp site/* dist/
          cp dist/stable.ign dist/ign.json
          cp dist/stable.ign dist/fcos.ign
          sed -i "s|__VERSION__|$VERSION|g" dist/index.html
          sed -i "s|__RELEASE__|$RELEASE|g" dist/index.html

          # Inject artifact links from the current run
          sed -i "s|__FCOS_AARCH64_STABLE__|${{ steps.artifacts.outputs.aarch64_stable }}|g"   dist/index.html
          sed -i "s|__FCOS_AARCH64_TESTING__|${{ steps.artifacts.outputs.aarch64_testing }}|g" dist/index.html
          sed -i "s|__FCOS_X86_64_STABLE__|${{ steps.artifacts.outputs.x86_64_stable }}|g"     dist/index.html
          sed -i "s|__FCOS_X86_64_TESTING__|${{ steps.artifacts.outputs.x86_64_testing }}|g"   dist/index.html

      - run: tree
        continue-on-error: true

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
